DWORD _ICNC_GetDLLVersion(void);
// Retourne le numero de la dll

DWORD _ICNC_SetSimulationMode( BOOL  SimulationModeVal);
// Permet de passer la DLL en mode simulation sans communication physique
// avec la carte. Il est ainsi possible de tester le programme pour ce qui est
// des acces aux fonctions de la DLL
// Input : True pour passer en mode simulation

DWORD _ICNC_Connect(DWORD ICNC_Number);
// Initialisation de la communication avec la carte InterpCNC

DWORD _ICNC_SetUserApplicationID(DWORD lUserApplicationID);
// Definition de l'ID application

DWORD _ICNC_Disconnect( void);
// Arret de la communication avec la carte InterpCNC

DWORD _ICNC_ErrorReset(DWORD ErrorBits);
// Deverouillage carte
// Acquittemement Arret d'urgence, Fin de course
// Input : Bits de defauts a remettre a 0
//                ICNC_STATUS_BIT_EMERGENCYSTOP
//                ICNC_STATUS_BIT_LOCKED
//                ICNC_STATUS_BIT_HOMING_ERROR
//                ICNC_STATUS_BIT_PROBING_ERROR
//                ICNC_STATUS_BIT_WAIT_INPUT_ERROR
//                ICNC_STATUS_BIT_EEWRITE_ERROR)
// Output :
//      ICNCUSB_SUCCESS si communication ok

DWORD _ICNC_GetBoardStatus(DWORD StatusType,     DWORD *Status); // Lecture du status de la carte. Il est possible de lire toutes les informations
// d'etat interne de la carte par un seul appel a cette fonction.
// Pour eviter de surcharger la communication, faite une demande approriee en fonction
// des informations necessaire a l'instant donne.
// Input :
//        StatusType : combinaison des bits d'etat a lire
//                    (exemple : ICNC_STATUS_BOARD_STATUS | ICNC_STATUS_BUFFER_FREE
// Output :
//       Status : pointeur sur une zone memoire permettant le stockage de tous les
//                 etats demandes.
// Result :  ICNCUSB_SUCCESS si communication ok
//
// Exemple1 : Lecture simultanee du status de la carte, de la place disponible dans le buffer
//            et de la position actuelle des axes X, Y et Z
//
//  Status DWORD[5];
//  ICNC_GetBoardStatus( ICNC_STATUS_BOARD_STATUS | ICNC_STATUS_BUFFER_FREE
//                         | ICNC_STATUS_ACTUALX | ICNC_STATUS_ACTUALY | ICNC_STATUS_ACTUALZ,
//                         &Status);

DWORD _ICNC_SetOutputAll(DWORD OutputState);
// Forcage de l'etat des sorties
// Entree :
//      OutputState = bits de sorties a activer

DWORD _ICNC_SetOverrideValue(DWORD OverrideValue); // Input
// Ecriture de la valeur de survitesse appliquee sur les commandes de deplacement.
// Input : OverrideValue = Sur vitesse en % de la vitesse de deplacement en cours.

DWORD _ICNC_GetOverrideValue(DWORD *OverrideValue); // Outpur
// Lecture de la valeur actuelle d'override

DWORD _ICNC_Probe(DWORD Axe, DWORD Direction, DWORD InNo, BOOL InValue, DWORD MaxStroke, DWORD Speed, DWORD FStart, DWORD Accel, DWORD Decel);
// Lancement d'une procedure de palpage sur un axe
// Entrees :
//        DWORD Axe : axe concerne (AXE_X ou AXE_Y...)
//        DWORD Direction : 0 si negative, 1 si positive
//        DWORD InNo : Numero de l'entree du palpeur
//        BOOL InValue : Valeur attendue sur le palpeur (0 ou 1)
//        DWORD MaxStroke : course maximum de recherche du palpeur
//        DWORD Speed : Vitesse de deplacement vers le capteur
//        DWORD FStart : Frequence de demarrage de l'axe  (Hz)
//        DWORD Accel : Acceleration  (KHz/s)
//        DWORD Decel : Deceleration  (KHz/s)
//
// L'utilisation de cette fonction pour le palpage permet de continuer le dialogue avec la carte durant l'operation de palpage.
// Durant cette operation, il est ainsi possible de lire les status de la carte pour affichage.
// Le bit de status ICNC_STATUS_BIT_PROBING reste a 1 tant que l'operation n'est pas terminee.
// Lorsque l'operation est terminee, le bit ICNC_STATUS_BIT_PROBING passe a 0.
// Il est alors necessaire de tester le bit de status ICNC_STATUS_BIT_PROBING_ERROR pour determiner si l'operation s'est deroulee correctement.
// Si tel est le cas, la position de l'axe au moment de la detection du contact peut etre lue par l'interrogation de status
// avec la demande ICNC_STATUS_LAST_PROBE

DWORD _ICNC_ProbeAndReadBack(DWORD Axe, DWORD Direction, DWORD InNo, BOOL InValue, DWORD MaxStroke, DWORD Speed, DWORD FStart, DWORD Accel, DWORD Decel, INT* ProbePosition);
// Lancement d'une procedure de palpage sur un axe et attente du resultat
// Fonctionnement identique a la fonction ICNC_Probe mais bloquante jusqu'a l'obtention du resultat
// Entrees :
//        DWORD Axe : axe concerne (AXE_X ou AXE_Y...)
//        DWORD Direction : 0 si positive, 1 si negative
//        DWORD InNo : Numero de l'entree du palpeur
//        BOOL InValue : Valeur attendue sur le palpeur (0 ou 1)
//        DWORD MaxStroke : course maximum de recherche du palpeur
//        DWORD Speed : Vitesse de deplacement vers le capteur
//        DWORD FStart : Frequence de demarrage de l'axe
//        DWORD Accel : Acceleration
//        DWORD Decel : Deceleration
//  Sortie :
//        INT* ProbePosition : Position de l'axe lors de la detection du palpeur
//  Resultat :
//      ICNCUSB_SUCCESS si l'operation s'est deroule correctement
//      ICNCUSB_PROBE_ERROR si erreur de parametre ou palpeur non trouvee dans la course indiquee
//      ICNCUSB_FAIL si erreur de communication

DWORD _ICNC_SlowStopMotors(DWORD Axis);
// Arret avec rampe des axes indiques

// Arret avec rampe et vidage buffer
DWORD _ICNC_SlowStopAllAndClear(void);

// Arret sans rampe et vidage buffer
DWORD _ICNC_StopMotorsAllAndClear(void);

DWORD _ICNC_GetOutputAll(DWORD *OutputState); // Output
// Lecture de l'etat des sorties

DWORD _ICNC_GetInput(DWORD InNo, BOOL *InputState);
// Lecture de l'etat d'une des entrees

DWORD _ICNC_GetInputAll(  DWORD *InputState); // Output
// Lecture de toutes les entrees

// Lecture d'une entree analogique
DWORD _ICNC_GetAnalog(   DWORD AnalogNo, DWORD *AnalogValue);

DWORD _ICNC_SetOutput(   DWORD OutputNo,BOOL OutputState);
// Set de l'etat d'une sortie

DWORD _ICNC_SetAnalog(DWORD AnalogNo, DWORD AnalogValue);
// Set de l'etat d'une sortie analogique
// Entrees :
//      AnalogNo : Numero de l'entree analogique : ICNC_ANALOG1 ou ICNC_ANALOG2...
//      AnalogValue :  resolution de l'ADC obtenue par   ICNC_GetSysInfo( ICNC_SYS_INFO_ADC_RESOLUTION)

DWORD _ICNC_GetExecTime (DWORD *ExecTime);
// Get total elapsed time in mouvement  (in ms unit)

DWORD _ICNC_GetSoftwareKeyValue(DWORD *SoftwareKeyValue);
// Lecture licence logiciel                         

DWORD _ICNC_LockBoard(void);
// Lecture licence logiciel                         

DWORD _ICNC_GetBufferStatus(DWORD *FreeBufferSpace); // Output
// Lecture de la place disponible dans le buffer carte

DWORD _ICNC_Unfreeze(void);
// Deverouillage du traitement du buffer
// forcer le dedblocage du buffer pour executer les commande presentes.
// A utiliser en conjonction avec la fonction ICNC_FreezeBuf lors de la gestion
// de la cinematique a l'aide de micro vecteurs

DWORD _ICNC_WriteUserMem(DWORD MemoryNumber, DWORD MemoryValue);
// Ecriture non bufferisee d'une des cellules memoire utilisateur
// Memory number = 0 a 9

DWORD _ICNC_ReadUserMem(  DWORD MemoryNumber,  DWORD *MemoryValue);

DWORD _ICNC_ReadEEPROM(DWORD StartAdress, DWORD Length,   BYTE* Value);

DWORD _ICNC_WriteEEPROM(DWORD StartAdress, DWORD Length, BYTE* Value,BOOL WaitCompletion=True, DWORD TimeOut=1000);

DWORD _ICNC_ReadParameter(DWORD ParameterID,INT *ParameterValue);
// Lecture d'un parametre carte. Voir definition dans GLOBALDEF.H

DWORD _ICNC_WriteParameter(DWORD ParameterID, DWORD ParameterValue, BOOL WaitCompletion=True, DWORD TimeOut=1000);
// Ecriture d'un parametre carte
// Par defaut, cette fonction attends et verifie l'ecriture du parametre dans un temps limite de 1000ms

DWORD _ICNC_WritePosition(DWORD Axis,INT PositionX=0,INT PositionY=0,INT PositionZ=0,INT PositionA=0,INT PositionB=0);
// Write internal motor position
// Ecriture dans les compteurs internes de position

DWORD _ICNC_MachineHome(DWORD Axis,DWORD MaxStrokeX=0xFFFFFFFF,DWORD MaxStrokeY=0xFFFFFFFF,DWORD MaxStrokeZ=0xFFFFFFFF,DWORD MaxStrokeA=0xFFFFFFFF,DWORD MaxStrokeB=0xFFFFFFFF);
// Lancement d'une procedure d'origine d'un ou plusieurs axes
// Entrees :
//      DWORD Axis : Axes concernes (AXE_X | AXE_Y ...)
//
// Cette fonction n'est pas bloquante. Il est donc possible de communiquer avec la carte durant la prise d'origine
// Durant le traitement de cette fonction, le bit de status ICNC_STATUS_BIT_HOMING est a 1
// Lorsque ce bit passe a 0, interroger le bit de status ICNC_STATUS_BIT_HOMING pour determiner si
// le traitement s'est deroule correctement.

DWORD _ICNC_SetTHCTarget(DWORD THCTargetValue);
// Fonction specifique pour machine de decoupe plasma

DWORD _ICNC_ConfigPrompt(BOOL PromptState);
// Non utilise

DWORD _ICNC_SetUSBSpeedMode(BOOL EnableHighSpeed);

DWORD _ICNC_GetSysInfo(DWORD SysInfoType,DWORD *SysInfo);
// Lecture des informations systems de la carte.
// Entrees :
//      DWORD SysInfoType : bits indiquant les informations a lire
//                      (voir definition des bits ICNC_SYS_INFO_xxxxxxx)
// Sortie :
//      DWORD *SysInfo : structure contenant les resultats des informations demandees

DWORD _ICNC_MoveProfileAbsAsync(DWORD Axe,DWORD FStartStop,DWORD Accel,DWORD Speed,DWORD Decel,INT   Position);
// Lancement d'un mouvement independent sur un axe.
// Si un mouvement est deja en cours, la nouvelle position cible est mise a jour.
// Le profile de vitesse est alors recalcule pour s'adapter a la nouvelle cible.
// Si l'axe est deja en mouvement et la cible inchangee, la commande prend en compte la nouvlle vitesse et le profile est ajuste.

DWORD _ICNC_MoveProfileRelAsync(DWORD Axe,DWORD FStartStop,DWORD Accel,DWORD Speed,DWORD Decel,INT   Distance);
// Lancement d'un mouvement independent sur un axe.
// Si un mouvement est deja en cours, la nouvelle position cible est mise a jour.
// Le profile de vitesse est alors recalcule pour s'adapter a la nouvelle cible.
// Si l'axe est deja en mouvement et la cible inchangee, la commande prend en compte la nouvlle vitesse et le profile est ajuste.

DWORD _ICNC_UpdateSpeed(DWORD Axe, DWORD NewFrenquency);
// Modification en dynamique d'un mouvement lance avec la commande de deplacement anynchrone.
// Si l'axe n'est pas en mouvement, la commande est ignoree.
// Les modifications de vitesses se font en respectant les rampes d'accel et de decel indiquee par la commande de deplacement
// La commande prend effet immediatement et n'est donc pas bufferisee.

DWORD _ICNC_SetTHCStateBuf(BOOL EnableTHC,  BOOL BufferizedCommand);
// Activation/desactivation logiciel du THC
// La commande peut etre bufferisee ou directe
// Note : Si le logciel doit prendre en charge l'activationdesactivation du THC, mettre
// le parammetre EE_THC_ACTIVATION_OUTPUT a 0 pour eviter les conflicts

// Freeze buffer treatement until buffer unfreezed or buffer full
DWORD _ICNC_FreezeBuf (void);

DWORD _ICNC_SetOverrideStateBuf(BOOL OverrideState); // Input
// Enable or disable the override mode

DWORD _ICNC_SetOutputBuf(DWORD OutputNo,BOOL OutputValue);

DWORD _ICNC_SetOutputAllBuf(DWORD OutputValue);

DWORD _ICNC_SetAnalogBuf(DWORD OutputNo,DWORD OutputValue);

DWORD _ICNC_WaitBuf(DWORD TimeToWait);
// Temporisation
// TimeToWait en 100ms

DWORD _ICNC_WaitInputStateBuf(DWORD InputNo,BOOL InputValue,DWORD TimeOut,BOOL LockIfError=False,BOOL ClearBufferIfError = False);
// Attentre l'etat d'une entree
// L'execution du buffer de commande est gele en attendant l'entree concernee

DWORD _ICNC_WriteUserMemBuf (DWORD MemNumber, DWORD Value);
// Ecriture non bufferisee d'une des cellules memoire utilisateur
// Memory number = 0 a 9

DWORD _ICNC_MoveSpeedRelBuf(DWORD Speed,INT MoveX,INT MoveY,INT MoveZ,INT MoveA,INT MoveB,DWORD *BufferRequired=NULL);
// Relative movement without speed profile
// Use local buffer for full frame transmission
// Deplacement relatif dans profile (vitesse constante) utilisant un buffer local
// sur le PC afin d'envoyer des trames completes sur la cartee et optimiser le flux de communication USB

DWORD _ICNC_MoveSpeedRelLocalBuf(DWORD Speed,INT MoveX,INT MoveY,INT MoveZ,INT MoveA,INT MoveB,DWORD *BufferRequired=NULL);

DWORD _ICNC_MoveSpeedAbsBuf(DWORD Axis,DWORD Speed,INT MoveX,INT MoveY,INT MoveZ,INT MoveA,INT MoveB,DWORD *BufferRequired=NULL);
// Absolute movement without speed profile
// Deplacement a une position absolue avec profile (trapezoidale) utilisant un buffer local
// sur le PC afin d'envoyer des trames completes sur la cartee et optimiser le flux de communication USB

DWORD _ICNC_MoveSpeedAbsLocalBuf(DWORD Axis,DWORD Speed,INT MoveX,INT MoveY,INT MoveZ,INT MoveA,INT MoveB,DWORD *BufferRequired=NULL);
// Absolute movement without speed profile
// Use local buffer for full frame transmission
// !!! Don't forget to use ICNC_FlushLocalBuf at the end
// Deplacement a une position absolue sans profile (vitesse constante) utilisant un buffer local
// sur le PC afin d'envoyer des trames completes sur la cartee et optimiser le flux de communication USB

DWORD _ICNC_FlushLocalBuf(void);
// Vidage du buffer local PC et envoie a la carte.

DWORD _ICNC_MoveProfileRelBuf(DWORD Speed,INT MoveX,INT MoveY,INT MoveZ,INT MoveA,INT MoveB,DWORD *BufferRequired=NULL);
// Relative movement with speed profile

DWORD _ICNC_MoveProfileAbsBuf(DWORD Axis,DWORD Speed,INT PositionX,INT PositionY,INT PositionZ,INT PositionA,INT PositionB,DWORD *BufferRequired=NULL);
// Absolute position movement with speed profile

DWORD _ICNC_PushPulsesData ( unsigned char *ptBuffer, INT nbBytes, DWORD Frequency, DWORD *BufferRequired=NULL);
// Envoie d'un tableau de pulses/direction a la carte
// Codage : Les octets du buffer peuvent etres des affectations de sens de rotation ou des pulses sur les sorties CLK.
// 			Octet de direction : 0x40 | DIRECTION   avec DIRECTION = etat des 5 sorties de direction
//			Octet de pas       : 0x20 | PULSES		avec PULSES qui indique sur quels sortie CLK generer des pulses
// Exemple : [0x41, 0x21, 0x23, 0x21]  aura pour effet d'activer la sortie DIR1 et de generer 3 pas sur CLK1 et 1 pas sur CLK2
// La frequence de traitement du tableau etant indiquee dans le parametre Frequency

// **********************************  Fonctions specifiques GALAAD							      
//#define	EVENT_MANUALCONTROL  0
//#define	EVENT_STARTPROCESS   1
//#define	EVENT_RAPIDTOXY      2
//#define	EVENT_TOOLDOWN       3
//#define	EVENT_DRILLING       4
//#define	EVENT_FEEDING        5
//#define	EVENT_LIFTUP         6
//#define	EVENT_PARKTOOL       7
//#define	EVENT_ENDPROCESS     8
//#define       EVENT_BREAKPROCESS   0xFFFF

DWORD _ICNC_ProcessEvent(DWORD Event,DWORD Param);

DWORD _ICNC_EventProcessing(void);
// Return 0 when process event in completed
// Return 0xFFFF when process event has been canceled
// Return Actual event iD during treatement

DWORD _ICNC_GetCuttingSpeed(void); // mm/mn
// if speed defined in ICNC2.DLL, return speed in mm/mn
// else return 0;

DWORD _ICNC_SetLanguage(DWORD Language);
//#define LANG_ENGLISH     0
//#define LANG_DEUTSCH     1
//#define LANG_FRANCAIS    2
//#define LANG_ITALIANO    3

DWORD _ICNC_SetVerboseMode(DWORD Verbose);

DWORD _ICNC_SetTorchDownParams(DWORD ToolNumber,DWORD OriginZ,DWORD HeadUpZ,DWORD ProbeTorchOffsetZ,DWORD ProbingMarginZ,DWORD FastSpeedDownZ,DWORD ProbingSpeedZ,DWORD FastSpeedUpZ,DWORD ProbeInputNumber,DWORD ProbeInputState);
// Receive cutting condition from GALAAD

DWORD _ICNC_PlasmaSettingDlg(  double* HPercage, double* TPercage, double* HCoupe, double* Vitesse, double* THCVoltage, double* Intensite,int*  PalpageOne, int*  THCActif, int*  ControlePoste, int*  Simulation);

DWORD _ICNC_SwitchToBootLoaderMode(  DWORD BootKey);
// Passage de la carte en mode bootloader pour transfert d'une mise a jour firmware.
